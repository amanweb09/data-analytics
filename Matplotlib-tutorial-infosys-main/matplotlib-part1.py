# -*- coding: utf-8 -*-
"""Matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19kUDwUoflQ3eKTZ6PL00lGsWeqjen-HO
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

"""**Introduction**"""

# Plot(x,y) function is used for plotting
# NOTE: If we pass a single argument, it will always it take it on Y-AXIS

plt.plot([10,20,30])  #just y-axis

plt.plot(["Jan", "Feb", "Mar", "Apr"],[100,200,200,300])  #both x and y

data = pd.read_csv("bank-marketing.csv")
data.head()
# data.columns

# let's plot this data using age-group on x-axis and salary on y-axis
age_group = data["age group"][:10]
salary = data["salary"][:10]

plt.plot(age_group, salary)

"""**Adding labels, Legend, Title**


"""

plt.plot(age_group, salary)

# labels
plt.xlabel("Age Groups")
plt.ylabel("Salary")

# title
plt.title("Age Group vs Salary")

# legend
plt.legend()

plt.show()

"""**Changing Properties**"""

# linewidth = width of the line
plt.plot(age_group, salary, color='red',linewidth=5, linestyle="dotted")

# changing figure size
plt.figure(figsize=(5,5))  #height, width

"""**Creating Subplots**"""

data = pd.read_csv("austin_weather.csv")


# defining how many subplots i want
figure, axes = plt.subplots(nrows=2, ncols=1)
print(axes, 'I am axes', figure, 'i am fig')

# defining 4 subplots
ax0, ax1 = axes.flat

# assigning values to each subplot
ax0.hist(data["TempAvgF"])
ax0.set_title("Average Temperature")

ax1.hist(data["DewPointAvgF"])
ax1.set_title("Average Dew")

"""**Stacked bar graph**"""

data = pd.read_csv("vgsales.csv")
data.head()

genre = data[["Genre", "NA_Sales", "EU_Sales", "JP_Sales"]].groupby(["Genre"], as_index=False).sum()
genre.head()

fig, ax = plt.subplots(nrows=1, figsize=(15,5))
bar_l = [i for i in range(len(genre['NA_Sales']))]
ax.bar(bar_l, genre["NA_Sales"], label="North America", color='r')
ax.bar(bar_l, genre["EU_Sales"], bottom=genre["NA_Sales"], label="Europe", color='b')  #as we want stacking therefore bottom property

na_and_eu_combined = zip(genre["NA_Sales"], genre["EU_Sales"])  #returns a tuple (na sales, eu_sales)
ax.bar(bar_l, genre["JP_Sales"], bottom=[na+eu for na, eu in na_and_eu_combined], label="Japan", color='g')  #as we want stacking therefore bottom property

ax.set_title("Video Game Sales")
ax.set_xlabel("Genre")
ax.set_ylabel("Sales")
ax.legend()

# some important params in subplots

# 1. moving label outside the figure -> bbox_to_anchor(pixel_value)
ax.legend(bbox_to_anchor=(1.11, 1.1)) #pixels where we want our legend

# 2. downloading the plot
plt.savefig('plot.png')

"""**Building Interactive Plots**"""

# WIDGETS help us create next, previous, etc buttons on our plots
from matplotlib.widgets import Button

frequencies = np.arange(2,20,3)

# lets create a plot for sinx
fig, ax = plt.subplots()
pi = np.pi
t = np.arange(0.0, 1.0, 0.001)
s = np.sin(2*pi*frequencies[0]*t)
l, = plt.plot(t,s,lw=2)

# next and prev button handler
class Index(object):
  index = 0

  def next(self, event):
    self.index +=1

    i = self.index % len(frequencies)
    ydata = np.sin(2*pi*frequencies[i]*t)
    l.set_ydata(ydata)
    plt.draw()

  def prev(self, event):
    self.index -=1

    i = self.index % len(frequencies)
    ydata = np.sin(2*pi*frequencies[i]*t)
    l.set_ydata(ydata)
    plt.draw()

callback = Index()
axprev = plt.axes([0.7, 0.05, 0.1, 0.075])
axnext = plt.axes([0.81, 0.05, 0.1, 0.075])

bnext = Button(axnext, "Next")
bnext.on_clicked(callback.next)

bprev = Button(axprev, "Previous")
bnext.on_clicked(callback.prev)

plt.show()

"""**Creating animation for plots**"""

import matplotlib.animation as manimation

mpeg_writer = manimation.writers["ffmpeg"]
metadata = {
    "title": "Movie Test",
    "artist": "Matplotlib",
    "comment": "movie support"
}
writer = mpeg_writer(fps=15, metadata=metadata)

fig = plt.figure()
l, = plt.plot([], [], 'k-o')

plt.xlim(-5, 5)
plt.ylim(-5,5)

x0,y0 = 0,0

with writer.saving(fig, "writer_test.mp4", 100):
  for i in range(100):
    x0 += 0.1*np.random.randn()
    y0 += 0.1*np.random.randn()

    l.set_data(x0, y0)
    writer.grab_frame()

"""**Creating a Slider**"""

from matplotlib.animation import FuncAnimation
from matplotlib.widgets import Slider

TWOPI = 2*pi
fig, ax = plt.subplots()

t= np.arange(0.0, TWOPI, 0.001)
initial_amp = 0.5
s = initial_amp*np.sin(t)
l, = plt.plot(t, s, lw=2)

ax = plt.axis([0, TWOPI, -1, 1])

axamp = plt.axes([0.25, 0.03, 0.5, 0.02])

# Slider
samp = Slider(axamp, "Amp", 0, 1, valinit=initial_amp)

def update(val):
  # amp is the current value of the slider
  amp = samp.val
  l.set_ydata(amp*np.sin(t))
  fig.canvas.draw_idle()

samp.on_changed(update)

plt.show()

"""**Event handling when data changes continuously through a pipeline**"""

def generate_data():
  while True:
    yield np.random.rand(10)

fig, ax = plt.subplots()
line, = ax.plot(np.random.rand(10))
ax.set_ylim(0,1)

def update():
  line.set_ydata(data)
  return line,

ani = FuncAnimation(fig, update, generate_data, interval=100)
plt.show()

"""**Layouting Subplots i.e. Non-Trivial Layouts**"""

"""
Here in 131, 1 means 1 row 3 means 3 columns and 1 is the subplot
"""
plt.subplot(131)
plt.subplot(132)
plt.subplot(133)

# getting a subplot stacked over each other i.e. 3 rows and 1 column
plt.subplot(311)
plt.subplot(312)
plt.subplot(313)

"""**Matplotlib Configuration File**  
Matplotlib globally exposes mpl.rcParams, which is a dictionary and stores settings of matplotlib. Any changes here will apply to all the plots
"""

import matplotlib as mpl

# changing line width of all the plots
mpl.rcParams['lines.linewidth'] = 5

# changing label color
mpl.rcParams['axes.labelcolor'] = 'red'

# restoring settings
mpl.rcdefaults()

"""**Creating Stylesheets**"""

# step1: locate the config directory
mpl.get_configdir()

# step 2; define a stylesheet by creating a file with extension .mpl and writing style in it

# step 3: load the stylesheet
plt.style.reload_library()

# step 4: use the stylesheet
# plt.style.use('file_name')

# see all available styles
plt.style.available

# make seaborn like plots
plt.style.use('seaborn-v0_8')

"""**Customising Colors**

Ways to specify colors
1. r,b,g,y,etc
2. C0, C1, C2
"""